{
  "label": {
    "cim": "Algoritmusok lépésenként",
    "oldalleirasa": "",
    "pszeudokod": "Pszeudokód",
    "struktogram": "Struktogram",
    "cppimplementacio": "C++ implementáció",
    "leiras": "Leírás",
    "bovebben": "Bővebben",
    "projecttitle": "Algoritmusok lépésenként",
    "tartalomjegyzek": "Tartalomjegyzék",
    "keszitette": "Készítette",
    "temavezeto": "Témavezető",
    "futtatas": "Futtatás",
    "feltetel": "Feltétel:",
    "hibasbemenet": "Hibás bemenet",
    "valtozokertekei": "Változók értékei",
    "tomballasa": "Tömb állása",
    "valtozas": "Változás: ",
    "menu": {
      "kezdooldal": "Kezdőoldal",
      "progtetelek": "Programozási tételek<span class='caret'></span>",
      "rendezesek": "Rendezések<span class='caret'></span>",
      "grafalgoritmusok": "Gráfalgoritmusok<span class='caret'></span>",
      "adatszerkezetek": "Adatszerkezetek<span class='caret'></span>",
      "egyeb": "Egyéb<span class='caret'></span>"
    },
    "fooldal": {
      "kezdooldal": "Kezdőoldal",
      "progtetelek": "Programozási tételek",
      "rendezesek": "Rendezések",
      "grafalgoritmusok": "Gráfalgoritmusok",
      "adatszerkezetek": "Adatszerkezetek",
      "egyeb": "Egyéb"
    },
    "cppPelda": "C++ példa",
    "dokumentacio": "Dokumentáció"
  },
  "pszeudokodelem": {
    "ha": "Ha",
    "amig": "Amíg",
    "kulonben": "Különben",
    "kulonbenha": "Különben ha",
    "ciklus": "Ciklus",
    "ciklusamig": "Ciklus amíg",
    "akkor": "akkor",
    "eljaras": "Eljárás",
    "kiiras": "Kiírás",
    "elagazasvege": "Elágazás vége",
    "ciklusvege": "Ciklus vége",
    "eljarasvege": "Eljárás vége",
    "es": "és",
    "vagy": "vagy"
  },
  "progtetel": {
    "osszegzes": {
      "leiras": "Az összegzés programozási tétel egymás után összeadogatja egy tömb elemeit.",
      "nev": "Összegzés",
      "cim": "Pr. tételek: Összegzés"
    },
    "megszamolas": {
      "leiras": "A megszámolás tétel egy tömb elemei között megszámlálja a T tulajdonsággal rendelkezőket. T egy tetszőleges tulajdonságfüggvényt jelent, egy sorozatbeli elemre nézve lehet igaz vagy hamis.",
      "nev": "Megszámolás",
      "cim": "Pr. tételek: Megszámolás"
    },
    "kereses": {
      "leiras": "Megkeresi az első olyan elemét a sorozatnak, melyre igaz a T függvény. T egy tetszőleges tulajdonságfüggvényt jelent.",
      "nev": "Keresés",
      "cim": "Pr. tételek: Keresés"
    },
    "logker": {
      "leiras": "A megszámolás tétel egy tömb elemei között megszámlálja a T tulajdonsággal rendelkezőket. T egy tetszőleges tulajdonságfüggvényt jelent, egy sorozatbeli elemre nézve lehet igaz vagy hamis.",
      "nev": "Logaritmikus keresés",
      "cim": "Pr. tételek: Logaritmikus keresés"
    },
    "maxkiv": {
      "leiras": "Egy sorozatban megadja a legnagyobb elem helyét / értékét.<br/>Szükséges feltétel: Értelmezve legyen egy rendezési reláció, illetve legalább egy elem legyen!",
      "nev": "Maximumkiválasztás",
      "cim": "Pr. tételek: Maximumkiválasztás"
    },
    "masolas": {
      "leiras": "Egy tömb elemeit átmásolja egy másik tömbbe, miközben valamilyen átalakítást végez az egyes elemeken.",
      "nev": "Másolás",
      "cim": "Pr. tételek: Másolás"
    },
    "kivalogatas": {
      "leiras": "Egy tömb feltételnek megfelelő elemeit egy másik tömbbe rakja.",
      "nev": "Kiválogatás",
      "cim": "Pr. tételek: Kiválogatás"
    },
    "szetvalogatas": {
      "leiras": "Két tömbbe válogatja szét egy tömb elemeit, attól függően, hogy a T feltétel teljesül-e az adott elemre.",
      "nev": "Szétválogatás",
      "cim": "Pr. tételek: Szétválogatás"
    },
    "unio": {
      "leiras": "Két halmaz (tömb) unióját adja meg.",
      "nev": "Unió"
    },
    "metszet": {
      "leiras": "Két halmaz (tömb) metszetét adja meg.",
      "nev": "Metszet"
    }
  },
  "rendezes": {
    "buborekos": {
      "leiras": "A buborékos rendezés egy egyszerű rendezési algoritmus. Nevét onnan kapta, hogy hasonlóan ahhoz, ahogy a pezsgőspohárban szállnak felfelé a buborékok, a rendezés során is minden egyes menetben a fennmaradó elemek közül a legnagyobbat \"áramoltatjuk fel\" a tömbszelet végére, tetejére.",
      "nev": "Buborékos rendezés",
      "cim": "Rendezések: Buborékos rendezés"
    },
    "minkiv": {
      "leiras": "A kiválasztásos rendezés egy egyszerű, négyzetes időben futó rendezési algoritmus. Az alapötlet az, hogy kiválasztjuk a rendezendő tömb legkisebb elemét, és kicseréljük a tömb legelső elemével. Ezzel a tömb első eleme megkapta a végső értékét, és a feladat egyszerűsödött a tömb maradékának rendezésére. Az algoritmust addig ismételjük a maradék tömbön, amíg csak egy elem marad. ",
      "nev": "Minimumkiválasztásos rendezés",
      "cim": "Rendezések: Minimumkiválasztásos rendezés"
    },
    "gyorsrendezes": {
      "leiras": "A gyorsrendezés oszd meg és uralkodj elven működik: a rendezendő számok listáját két részre bontja, majd ezeket a részeket rekurzívan, gyorsrendezéssel rendezi. A felbontáshoz kiválaszt egy támpontnak nevezett elemet (más néven pivot, főelem vagy vezérelem), és particionálja a listát: a támpontnál kisebb elemeket eléje, a nagyobbakat mögéje mozgatja. Teljes indukcióval könnyen belátható, hogy ez az algoritmus helyesen működik.",
      "nev": "Gyorsrendezés",
      "cim": "Rendezések: Gyorsrendezés"
    },
    "osszefesulesesrendezes": {
      "leiras": "Az összefésülő rendezés alapötlete, hogy eleve rendezett elemsorozatok aránylag egyszerűen vonhatók össze rendezett sorozattá. Az algoritmus lényege, hogy az elemeket két csoportba osztjuk, a csoportokat rendezzük (akár összefésülő rendezéssel), majd a kapott részeket összefésüljük. ",
      "nev": "Összefésüléses rendezés",
      "cim": "Rendezések: Összefésüléses rendezés"
    }
  },
  "adatszerkezet": {
    "sor": {
      "nev": "Sor",
      "muvelet": {
        "sorbol": "Sorból",
        "sorba": "Sorba",
        "urese": "Üres-e?",
        "telie": "Teli-e?",
        "elso": "Első"
      }
    },
    "verem": {
      "nev": "Verem",
      "muvelet": {
        "verembol": "Veremből",
        "verembe": "Verembe",
        "urese": "Üres-e?",
        "telie": "Teli-e?",
        "elso": "Első"
      }
    }
  },
  "egyeb": {
    "faktorialis": {
      "leiras": "Kiszámítja az N faktoriálist (N!).",
      "nev": "Faktoriális"
    }
  },
  "komplex": {
    "moho": {
      "leiras": "A mohó algoritmus vagy greedy algoritmus az a problémamegoldó algoritmus, amely helyi optimumok megvalósításával próbálja megtalálni a globális optimumot. Ez például az utazó ügynök problémájaként ismert feladatban azt jelenti, hogy minden állomásról a legközelebbi, addig még nem látogatott városba fog utazni az ügynök.",
      "nev": "Mohó algoritmus"
    }
  }
}